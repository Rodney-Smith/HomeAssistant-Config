##############################################################################
# @author       : Rodney Smith
# @date         : 07/04/2023
# @package      : Notify
# @description  : A Collection of Notification Scripts and Configs. 
#                            https://www.home-assistant.io/integrations/notify/
# Package modified from 
# https://github.com/skalavala/smarthome/blob/master/packages/notify.yaml
# with inspiration from
# https://github.com/CCOSTAN/Home-AssistantConfig/blob/master/config/script/speech_engine.yaml
# and
# https://github.com/thejeffreystone/home-assistant-configuration/blob/master/config/packages/notify.yaml
###############################################################################
# Including Directories
# !include_dir_list will return the content of a directory as a list with each
#    file content being an entry in the list. The list entries are ordered based
#    on the alphanumeric ordering of the names of the files.
# !include_dir_named will return the content of a directory as a dictionary
#    which maps filename => content of file.
# !include_dir_merge_list will return the content of a directory as a list by
#    merging all files (which should contain a list) into 1 big list.
# !include_dir_merge_named will return the content of a directory as a
#    dictionary by loading each file and merging it into 1 big dictionary.
###############################################################################
#notify: !include_dir_list ../entities/notify
notify:
  - platform: ios
  - name: all_ios
    platform: group
    services:
      - service: mobile_app_einstein_iphone
      - service: mobile_app_ginas_iphone
  - name: ios_rodney
    platform: group
    services:
      - service: mobile_app_einstein_iphone
      - service: mobile_app_ipad
      - service: mobile_app_macbook_air
  - name: ios_gina
    platform: group
    services:
      - service: mobile_app_ginas_iphone

#  - platform: telegram
#  - name: Telegram_Rodney
#    chat_id: !secret telegram_id_rs
#  - platform: telegram
#  - name: Telegram_Meridian
#    chat_id: !secret telegram_id_ha

tts:
  - platform: google_translate
    cache: true
    cache_dir: /tmp/tts
    time_memory: 300
#  - platform: amazon_polly
#    aws_access_key_id: !secret aws_key
#    aws_secret_access_key: !secret aws_secret
#    region_name: 'us-west-1'
#    text_type: ssml
#    voice: Matthew
#    cache: True
#    engine: neural

script:
###############################################################################
# Text Notify
###############################################################################
  notify_text_all:
    alias: Notify - Text ALL
    sequence:
      - service: notify.all_ios
        data_template:
          title: >
            {{title}}
          message: >
            {{ message }}
          data: >-
            {{data}}

  text_debug:
    alias: Text - DEBUG
    sequence:
      - condition: state
        entity_id: input_boolean.notify_text_debug
        state: 'on'
      - service: notify.ios_rodney
        data_template:
          title: >
            {{title}}
          message: >
            {{ message }}
          data: >-
            {{data}}

  notify_text_rodney:
    alias: Notify - Text Rodney
    description: Notify all devices assigned to Rodney
    fields:
      title:
        description: The Title of the notification
        example: Example title text
      message:
        description: The Message content
        example: Example message text
    sequence:
      - condition: state
        entity_id: input_boolean.notify_text_rodney
        state: 'on'
      - service: notify.ios_rodney
        data_template:
          title: >
            {{title}}
          message: >
            {{ message }}
          data: >-
            {{data}}
    mode: single

  notify_text_gina:
    alias: Text - Notify Gina
    sequence:
      - condition: state
        entity_id: input_boolean.notify_text_gina
        state: 'on'
      - service: notify.ios_gina
        data_template:
          title: >
            {{title}}
          message: >
            {{ message }}
          data: >-
            {{data}}

  notify_text:
    alias: Notify - Text
    sequence:
      - condition: state
        entity_id: input_boolean.notify_text
        state: 'on'
      - choose:
        - conditions:
          - condition: template
            value_template: '{{ who == "rodney"}}'
          - condition: state
            entity_id: input_boolean.notify_text_rodney
            state: 'on'
          sequence:
          - service: notify.ios_rodney
            data:
              title: '{{ title }}'
              message: '{{ message }}'
              data: '{{data}}'
        - conditions:
          - condition: template
            value_template: '{{ who == "gina"}}'
          - condition: state
            entity_id: input_boolean.notify_text_gina
            state: 'on'
          sequence:
          - service: notify.ios_gina
            data:
              title: '{{ title }}'
              message: '{{ message }}'
              data: '{{data}}'
        default: 
        - service: notify.all_ios
          data:
            title: '{{ title }}'
            message: '{{ message }}'
            data: '{{data}}'

  text_alert:
    alias: Text - Alert
    sequence:
      - service: >
            {% if who == 'rodney' %}
              notify.ios_rodney
            {% elif who == 'gina' %}
              notify.ios_gina
            {% else %}
              notify.all_ios
            {% endif %}
        data:
          title: '{{ title }}'
          message: '{{ message }}'
          data: '{{data}}'
          #  attachment:
          #    url: '{{ url }}'
          #    content-type: '{{ content_type }}'
          #    hide-thumbnail: false
          #  push:
          #    sound: '{{ ios_sound }}'
          #  badge: 0
          #    category: '{{ ios_category }}'
          #  entity_id: '{{ camera_entity }}'

  text_alert_image:
    alias: Text - Alert Image
    sequence:
      - service: >
            {% if who == 'rodney' %}
              notify.ios_rodney
            {% elif who == 'gina' %}
              notify.ios_gina
            {% else %}
              notify.all_ios
            {% endif %}
        data:
          title: '{{ title }}'
          message: '{{ message }}'
          data:
            attachment:
              url: '{{ url }}'
              content-type: '{{ content_type }}'
              hide-thumbnail: false
          #  push:
          #    sound: '{{ ios_sound }}'
          #  badge: 0
          #    category: '{{ ios_category }}'
          #  entity_id: '{{ camera_entity }}'

###############################################################################
# Alert Notify
# Conditions:
#   => Vacation mode should be off
# Services:
#   => Audible 
#   => iOS 
###############################################################################
  notify_alert:
    alias: Notify - Alert
    sequence:
      - condition: state
        entity_id: input_boolean.mode_vacation
        state: 'off'
      - service: tts.google_translate_say
        data_template:
          entity_id: media_player.of_echo_show8
          message: >
            {{ message }}

  jarvis_alert:
    alias: Jarvis Alert
    sequence:
    - service: mqtt.publish
      data_template:
        topic: 'house/polly/lastmsg'
        payload: 'This message is from {{ now().strftime("%-I") }}:{{ now().strftime("%M") }} {{ now().strftime("%p") }}. {{ message | striptags | truncate(220)}}'
        retain: true
    - service: media_player.turn_on
      data_template:
        entity_id: >
          {% if who == 'kitchen' %}
            media_player.kitchen_echo_flex
          {% elif who == 'main_bedroom' %}
            media_player.bedroom_echo_dot
          {% elif who == 'office' %}
            media_player.of_echo_show8
          {% elif who == 'guest1' %}
            media_player.guest1_echo_dot
          {% elif who == 'living_room' %}
            media_player.sound_system
          {% else %}
            {% if states.input_boolean.notify_audible.state == 'on' %}
            media_player.sound_system
            {% else %}
            media_player.of_echo_show8
            {% endif %}
          {% endif %}
    - service: media_player.volume_set
      data_template:
        entity_id: >
          {% if who == 'kitchen' %}
            media_player.kitchen_echo_flex
          {% elif who == 'main_bedroom' %}
            media_player.bedroom_echo_dot
          {% elif who == 'office' %}
            media_player.of_echo_show8
          {% elif who == 'guest1' %}
            media_player.guest1_echo_dot
          {% elif who == 'living_room' %}
            media_player.sound_system
          {% else %}
            {% if states.input_boolean.notify_audible.state == 'on' %}
              media_player.sound_system
            {% else %}
              media_player.of_echo_show8
            {% endif %}
          {% endif %}
        volume_level: >
          {% if who == 'kitchen' %}
            .80
          {% elif who == 'main_bedroom' %}
            .50
          {% elif who == 'office' %}
            .65
          {% elif who == 'guest1' %}
            .50
          {% elif who == 'living_room' %}
            .99
          {% else %}
            {% if states.input_boolean.notify_audible.state == 'on' %}
              .75
            {% else %}
              .99
            {% endif %}
          {% endif %}
#    - service: tts.amazon_polly_say
#      data_template:
#        entity_id: >
#          {% if who == 'kitchen' %}
#            media_player.kitchen_echo_flex
#          {% elif who == 'main_bedroom' %}
#            media_player.bedroom_echo_dot
#          {% elif who == 'office' %}
#            media_player.of_echo_show8
#          {% elif who == 'guest1' %}
#            media_player.guest1_echo_dot
#          {% elif who == 'living_room' %}
#            media_player.sound_system
#          {% else %}
#            {% if states.input_boolean.notify_audible.state == 'on' %}
#              media_player.sound_system
#            {% else %}
#              media_player.guest1_echo_dot
#            {% endif %}
#          {% endif %}
#        message: >-
#          <speak>
#            {{ message }}
#          </speak>
#        cache: true

###############################################################################
# Voice Notify
# Conditions:
#   => Only Announce when people are home.
#   => Only Announce when Audible Notifications are on
###############################################################################
  speech_engine:
    alias: Speech Engine
    sequence:
      - service: mqtt.publish
        data_template:
          topic: 'house/polly/lastmsg'
          payload: 'This message is from {{ now().strftime("%-I") }}:{{ now().strftime("%M") }} {{ now().strftime("%p") }}. {{ message | striptags | truncate(220)}}'
          retain: true
      - service: mqtt.publish
        data_template:
          topic: 'house/polly/lastloc'
          payload: '{{ who }}'
          retain: true
      - condition: state
        entity_id: input_boolean.notify_audible
        state: 'on'
      - condition: state
        entity_id: group.family
        state: 'home'
      - condition: state
        entity_id: input_boolean.mode_vacation
        state: 'off'
      - service: >
          {% if voice == 'nabu' %}
            script.nabu_voice      
          {% elif who in ['kitchen_echo_flex','media_player.kitchen_echo_flex','kitchen'] %}
            {% if is_state('media_player.kitchen_echo_flex','playing') %}
              {% set who = 'kitchen' %}
              script.jarvis_voice
            {% else %}
              {% set who = 'kitchen_echo_flex' %}
              script.alexa_voice
            {% endif %}
          {% elif who in ['lr_echo_show5', 'media_player.lr_echo_show5','living_room']  %}
            {% if is_state('media_player.lr_echo_show5','playing') %}
              {% set who = 'living_room' %}
              script.jarvis_voice
            {% else %}
              {% set who = 'lr_echo_show5' %}
              script.alexa_voice
            {% endif %}
          {% elif who in ['guest1','media_player.guest1_echo_dot']  %}
            {% if is_state('media_player.guest1_echo_dot','playing') %}
              {% set who = 'guest1' %}
              script.jarvis_voice
            {% else %}
              {% set who = 'media_player.guest1_echo_dot' %}
              script.alexa_voice
            {% endif %}
          {% elif who in ['main_bedroom']  %}
            script.jarvis_voice
          {% else %}
            {% set who = 'lr_echo_show5' %}
            script.alexa_voice
          {% endif %}
        data:
          who: '{{ who }}'
          message: >
            {{ message }}

  # Use this Simplfied Script by calling in automation or script like:
  # service: script.speech_engine_simplified
  # data:
  #   who: media_player.sound_system
  #   #who:  “{{ states(‘sensor.room_presence’) }}”
  #   #who: notify.kitchen_echo_flex
  #   message: something to say
  #
  # 
#  speech_engine_simplified:
#    sequence:
#      - condition: state
#        entity_id: input_boolean.notify_audible
#        state: 'on'
#      - condition: state
#        entity_id: group.family
#        state: 'home'
#      - condition: state
#        entity_id: input_boolean.mode_vacation
#        state: 'off'
#      - service: tts.amazon_polly_say
#        data_template:
#          entity_id: >-
#            {{ who }}
#          message: >-
#            <speak>
#            <break time="1s"/>
#            {{ message }}
#            </speak>
#          cache: true
#      - service: >-
#          {{ who }}
#        data: 
#          message: >
#            {{ message }}
#          data:
#            type: tts
#      - service: tts.cloud_say
#        data_template:
#          entity_id: >-
#            {{ who }}
#          message: >-
#            {{ message }}
#          cache: true
#          language: en-GB
#          options: 
#            gender: male

# Called wheh notification needs to play on echos
  alexa_voice:
    alias: Voice - Alexa
    sequence:
    - service: media_player.turn_on
      data_template:
        entity_id: >
          {% if who in ['kitchen_echo_flex','media_player.kitchen_echo_flex','kitchen'] %}
            notify.alexa_media_kitchen_echo_flex
          {% elif who in ['bedroom1','media_player.guest1_echo_dot','guest1'] %}
            notify.alexa_media_guest1_echo_dot
          {% elif who in ['lr_echo_show5','media_player.lr_echo_show5','living_room'] %}
            notify.alexa_media_lr_echo_show5
          {% else %}
            notify.alexa_media_lr_echo_show5
          {% endif %}
    - service: media_player.volume_set
      data_template:
        entity_id: >
          {% if who in ['kitchen_echo_flex','media_player.kitchen_echo_flex','kitchen'] %}
            notify.alexa_media_kitchen_echo_flex
          {% elif who in ['bedroom1','media_player.guest1_echo_dot','guest1'] %}
            notify.alexa_media_guest1_echo_dot
          {% elif who in ['lr_echo_show5','media_player.lr_echo_show5','living_room'] %}
            notify.alexa_media_lr_echo_show5
          {% else %}
            notify.alexa_media_lr_echo_show5
          {% endif %}
        volume_level: >
            {% if is_state('input_boolean.notify_audible.state','on') %}
              .6
            {% else %}
              .4
            {% endif %}
    - service: >
        {% if who in ['kitchen_echo_flex','media_player.kitchen_echo_flex','kitchen'] %}
          notify.alexa_media_kitchen_echo_flex
        {% elif who in ['bedroom1','media_player.guest1_echo_dot','guest1'] %}
          notify.alexa_media_guest1_echo_dot
        {% elif who in ['lr_echo_show5','media_player.lr_echo_show5','living_room'] %}
        notify.alexa_media_lr_echo_show5
        {% else %}
          notify.alexa_media_lr_echo_show5
        {% endif %}
      data: 
          message: >
            {{ message }}
          data:
            type: tts

  # Default audible notifications. Notifcations play on the google devices. 
  jarvis_voice:
    alias: Voice - Jarvis
    sequence:
    - service: media_player.turn_on
      data_template:
        entity_id: >
          {% if who == 'kitchen' %}
            media_player.kitchen_echo_flex
          {% elif who == 'guest1' %}
            media_player.guest1_echo_dot
          {% elif who == 'main_bedroom' %}
            media_player.bedroom_echo_dot
          {% elif who == 'office' %}
            media_player.of_echo_show8
          {% elif who == 'living_room' %}
            media_player.sound_system
          {% else %}
            {% if states.input_boolean.notify_audible.state == 'on' %}
            media_player.sound_system
            {% else %}
            media_player.kitchen_echo_flex
            {% endif %}
          {% endif %}
    - service: media_player.volume_set
      data_template:
        entity_id: >
          {% if who == 'kitchen' %}
            media_player.kitchen_echo_flex
          {% elif who == 'guest1' %}
            media_player.guest1_echo_dot
          {% elif who == 'main_bedroom' %}
            media_player.bedroom_echo_dot
          {% elif who == 'office' %}
            media_player.of_echo_show8
          {% elif who == 'living_room' %}
            media_player.sound_system
          {% else %}
            {% if states.input_boolean.notify_audible.state == 'on' %}
            media_player.sound_system
            {% else %}
            media_player.kitchen_echo_flex
            {% endif %}
          {% endif %}
        volume_level: >
            {% if states.input_boolean.notify_audible.state == 'on' %}
              {% if who == 'main_bedroom' %}
                {{ states('input_number.tts_echo_volume') | float }}
              {% elif who == 'living_room' %}
                {{ states('input_number.tts_echo_volume') | float }}
              {% else %}
                {{ states('input_number.tts_announcement_volume') | float }}
              {% endif %} 
            {% else %}
              {{ states('input_number.tts_echo_volume') | float }}
            {% endif %}
#    - service: tts.amazon_polly_say
#      data_template:
#        entity_id: >
#          {% if who == 'kitchen' %}
#            media_player.kitchen_echo_flex
#          {% elif who == 'guest1' %}
#            media_player.guest1_echo_dot
#          {% elif who == 'main_bedroom' %}
#            media_player.bedroom_echo_dot
#          {% elif who == 'office' %}
#            media_player.of_echo_show8
#          {% elif who == 'living_room' %}
#            media_player.sound_system
#          {% else %}
#            {% if states.input_boolean.notify_audible.state == 'on' %}
#            media_player.sound_system
#            {% else %}
#            media_player.kitchen_echo_flex
#            {% endif %}
#          {% endif %}
#        message: >-
#          <speak>
#          <break time="1s"/>
#          {{ message }}
#          </speak>
#        cache: true

  nabu_voice:
    alias: Voice - nabu casa
    sequence:
    - service: media_player.turn_on
      data_template:
        entity_id: >
          {% if who == 'kitchen' %}
            media_player.kitchen_echo_flex
          {% elif who == 'guest1' %}
            media_player.guest1_echo_dot
          {% elif who == 'main_bedroom' %}
            media_player.bedroom_echo_dot
          {% elif who == 'office' %}
            media_player.of_echo_show8
          {% elif who == 'living_room' %}
            media_player.sound_system
          {% else %}
            {% if states.input_boolean.notify_audible.state == 'on' %}
            media_player.sound_system
            {% else %}
            media_player.kitchen_echo_flex
            {% endif %}
          {% endif %}
    - service: media_player.volume_set
      data_template:
        entity_id: >
          {% if who == 'kitchen' %}
            media_player.kitchen_echo_flex
          {% elif who == 'guest1' %}
            media_player.guest1_echo_dot
          {% elif who == 'main_bedroom' %}
            media_player.bedroom_echo_dot
          {% elif who == 'office' %}
            media_player.of_echo_show8
          {% elif who == 'living_room' %}
            media_player.sound_system
          {% else %}
            {% if states.input_boolean.notify_audible.state == 'on' %}
            media_player.sound_system
            {% else %}
            media_player.kitchen_echo_flex
            {% endif %}
          {% endif %}
        volume_level: >
            {% if states.input_boolean.notify_audible.state == 'on' %}
              .5
            {% else %}
              .3
            {% endif %}
    - service: tts.cloud_say
      data_template:
        entity_id: >
          {% if who == 'kitchen' %}
            media_player.kitchen_echo_flex
          {% elif who == 'guest1' %}
            media_player.guest1_echo_dot
          {% elif who == 'main_bedroom' %}
            media_player.bedroom_echo_dot
          {% elif who == 'office' %}
            media_player.of_echo_show8
          {% elif who == 'living_room' %}
            media_player.sound_system
          {% else %}
            {% if states.input_boolean.notify_audible.state == 'on' %}
            media_player.sound_system
            {% else %}
            media_player.kitchen_echo_flex
            {% endif %}
          {% endif %}
        message: >-
            {{ message }}
        cache: true
        language: en-GB
        options: 
          gender: male

  dim_living_room_volume:
    alias: Volume - Down in Living Room
    sequence:
    - condition: state
      entity_id: 'media_player.sound_system'
      state: 'playing'
    - service: input_number.set_value
      data_template:
        entity_id: input_number.old_volume
        value: >
          {{ states.media_player.sound_system.attributes.volume_level }}
    - service: media_player.volume_set
      data_template:
        entity_id: media_player.sound_system
        volume_level: .2

  raise_living_room_volume:
    alias: Volume - Up in Living Room
    sequence:
    - condition: state
      entity_id: 'media_player.sound_system'
      state: 'playing'
    - service: media_player.volume_set
      data_template:
        entity_id: media_player.sound_system
        volume_level: >
          {{ states.input_number.old_volume.state }}    

# ###############################################################################
# # Status Announcements
# ###############################################################################
  status_annc:
    alias: Status Announcements
    sequence:
      - service: script.speech_engine
        data:
          who: '{{ who }}'
          message: >-
            {% macro greeting() %}
              <p>
              {% if now().strftime('%H')|int < 12%}
                Good morning.
              {% elif now().strftime('%H')|int >= 12 and now().strftime('%H')|int < 17 %}
                Good afternoon.
              {% else %}
                Good evening.
              {% endif %}
              </p>
            {% endmacro %}

            {% macro confirmation() %}
              <p>
              {{ [
              'Okay.', 
              'If you insist.',
              'I am afraid I can not do that <break time="1s"/> I am kidding,',
              'Leave it to me.',
              'As you wish.',
              'I am on it.',
              'No Problem.',
              'I think I can handle that.',
              'Working on it now.',
              '<break time="2s"/> Oh, you were talking to me. Let me take care of that.'
              'Why not. It is not like I ever sleep.',
              'I am not even supposed to be here today. But whatever.',
              'You did not say the magic word. <break time="1s"/> Oh forget it. I will take care of it.',
              'Funny, I was just about to do that.',
              'There are still terabytes of calculations required before I can.<break time="1s"/> Oh, whatever.'
              ] | random }}
              </p>
            {% endmacro %}

            {% macro interuption() %}
              <p>
              {{ [
                  'Pardon me, ',
                  'Excuse me, ',
                  'I do not mean to interrupt, but,',
                  'I hate to interrupt, but,',
                  'I beg your pardon, ',
                  'I do not mean to intrude, but, ',
                  'I am sorry to interrupt, but. ',
                  'Just a quick heads up, '
                  ] | random }}
              </p>
            {% endmacro %}

            {% macro issue() %}
              <p>
              {{ [
                  'Meridian Emergency Alert!',
                  'Meridian, We have a problem!',
                  'You might not like this.',
                  'There is something that needs your attention.'
                  ] | random }}
              </p>
            {% endmacro %}

            {% macro time_is() %}
              <p>
              It is {{ now().strftime("%I:%M %p") }}
              </p>
            {% endmacro %}

            {% macro lightning_alert() %}
                {{ [
                  'I have detected lightning withing 20 miles of Meridian.',
                  'Did you see that flash? I did. Lightning is near.',
                  'If you didnt hear the thunder you will soon. '
                ]|random }}
                  If anyone is outside they shoudld seek shelter inside. 
            {% endmacro %}

            {% macro lightning_clear() %}
                {{ [
                  'Lightning threat appears to be over.',
                  'No more lightning appears to be occuring.',
                  'Lightning is gone.'
              ]|random }}
                It is safe to resume normal activities. 
            {% endmacro %}

            {% macro freeze_warning() %}
              {% if is_state('input_boolean.freeze_warning','on') %}
              { [ 'The temperature is expected to be near or below freezing. Someone might want to bring the lemon tree in. ',
                'It appears that it will be cold tonight. Like, the turn water solid kind of cold. Think of the poor plants.',
                'I suggest bringing in the plants other wise, the temperature might kill them. And that will be on you.',
                'I would say winter is coming. But, based on the weather forecast it appears to be here.',
                'It will be freezing cold tonight. I would bring in the plants but I lack legs. And Arms. So I am forced to rely on you. Do not let me down.'
              ] | random }}
              {% endif %}
            {% endmacro %}

            {% macro rodney_location() %}
              {% if is_state('input_boolean.travel_monitor_rodney', 'on') %}
                Rodney appears to be headed home. Based on current traffic conditions, he should be here in {{states.sensor.rodney_ett_home.attributes.duration | round}} minutes.
              {% else %}
                {% if is_state('sensor.rodney_location', 'home') %}
                {% elif is_state('sensor.rodney_location', 'Lost') %}
                  Rodney is lost, and at last check was {{states.sensor.rodney_ett_home.attributes.duration | round}} minutes from home.
                {% else %}
                  Rodney is currently at {{ states.sensor.rodney_location.state }}, and at last check was {{states.sensor.rodney_ett_home.attributes.duration | round}} minutes from home.
                {% endif %}
              {% endif %}
            {% endmacro %}

            {% macro gina_location() %}
              {% if is_state('input_boolean.travel_monitor_gina', 'on') %}
                {%- if states.device_tracker.ginas_iphone.attributes.moving == True or states.device_tracker.ginas_iphone.attributes.driving == True %}
                  Gina is currently heading home and will be here in {{states.sensor.gina_ett_home.attributes.duration | round}} minutes based on current traffic conditions.  
                {% else %}
                  {% if is_state('sensor.gina_location', 'Lost') %}
                    I cannot determine Ginas exact location, but at last check was {{states.sensor.gina_ett_home.attributes.duration | round}} minutes from home. 
                  {% else %}
                    Gina is currently at {{ states.sensor.gina_location.state }}, and at last check was {{states.sensor.gina_ett_home.attributes.duration | round}} minutes from home. 
                  {% endif %}
                {% endif %}
              {% else %}
                {%- if states.device_tracker.ginas_iphone.attributes.moving == True or states.device_tracker.ginas_iphone.attributes.driving == True %}
                  Gina is currenly moving, and At last check was {{states.sensor.gina_ett_home.attributes.duration | round}} minutes from home.
                {% else %}
                  {% if is_state('sensor.gina_location', 'home') %}
                  {% elif is_state('sensor.gina_location', 'Zoo Atlanta') %}
                    Gina is at {{ states.sensor.gina_location.state }}, and doesn't appear to be headed home yet.
                  {% elif is_state('sensor.gina_location', 'Lost') %}
                    I cannot get Ginas exact location, but at last check was {{states.sensor.gina_ett_home.attributes.duration | round}} minutes from home.
                  {% else %}
                    Gina is at {{ states.sensor.gina_location.state }}, and
                      at last check was {{states.sensor.gina_ett_home.attributes.duration | round}} minutes from home.
                  {% endif %}
                {% endif %}
              {% endif %} 
            {% endmacro %}

            {% macro headed_home_rodney() %}
              Rodney appears to be headed home. Based on current traffic conditions, he should be here in {{states.sensor.rodney_ett_home.attributes.duration | round}} minutes.
            {% endmacro %}

            {% macro headed_home_gina() %}
              Gina appears to be headed home. Based on current traffic conditions, she should be here in {{states.sensor.gina_ett_home.attributes.duration | round}} minutes.
            {% endmacro %}

            {% macro traffic_conditions() %}
              {%- if states.sensor.home_to_zoo.state|round > 50 %}
                Traffic appears heavier than normal.
              {% else %}
                Traffic is normal.
              {% endif %}
              Currently it will take {{states.sensor.home_to_zoo.state|round}} minutes to get to the Zoo.
              {%- if states.sensor.home_to_summit.state|round > 50 %}
                Traffic to the office appears heavier than normal.
              {% else %}
                Traffic to the office is normal.
              {% endif %}
              Currently it will take {{states.sensor.home_to_summit.state|round}} minutes to get to the office taking {{ states.sensor.home_to_summit.attributes.route }}.
            {% endmacro %}

            {% macro iss() %} 
              {{ [
                  'But the International Space Station is passing over. Wave.',
                  'But The International Space Station just flew by.',
                  'But if you were to look up right now, and it was dark outside, and you happened to be looking in the right place you would see the International Space Station go by. But, it has already passed.'
                  ] | random}} 
            {% endmacro %}

            {%- macro washer_needs_emptying() -%}
              <p>
                The washing machine completed its cycle 
                {% set seconds = now().timestamp() - as_timestamp(states.sensor.washer_status.last_changed) %}
                {% set hours = seconds / 60 %}
                {% if (seconds / ( 60 * 60 )) | int == 1 %}
                  over an hour ago.
                  {{ [
                  'Do not forget to rotate the clothes.', 
                  'Was someone going to rotate the laundry?',
                  'Once you rotate the laundry I will stop reminding you to do it. So if you want me to stop. Its up to you.'
                  ] | random }}
                {% elif (seconds / ( 60 * 60 )) | int > 1 and (seconds / ( 60 * 60 )) | int < 6 %}
                  over {{ (seconds //  ( 60 * 60 )) | int }} hours ago.
                  {{ [
                  'Much longer and you are going to need to wash them again.', 
                  'Someone needs to rotate the laundry.',
                  'Do not forget about the clothes in the washing machine.',
                  'Surely you did not mean to forget about the clothes. Mistakes happen. But you can still fix it.',
                  'Do you like your clothes smelling like mildew? Becasue that is what is happening right now.'
                  ] | random }}
                {% elif (seconds / ( 60 * 60 )) | int > 6 %}
                  over {{ (seconds //  ( 60 * 60 )) | int }} hours ago.
                  {{ [
                  'That is a crazy amount of time.', 
                  'Did you decide you want those clothes to suffer?',
                  'You might as well just rewash those clothes.',
                  'I can smell the mildew. Virtually that is.',
                  'Surely you did not mean to forget about the clothes.'
                  ] | random }}
                {% else %}
                  {{ (seconds // 60) | int }} minutes ago.
                  {{ [
                  'Do not forget to rotate the clothes.', 
                  'Someone forgot to move the clothes to the dryer. I am not going to name names, but there is a camera in there. Do I need to publically shame someone?',
                  'You might want to move them to the dryer.'
                  ] | random }}
                {% endif %}
              </p>
            {%- endmacro -%}

            {%- macro house_party_protocol_enabled() -%}
              {{ [
                'Meridian has been configured for a House Party.',
                'Incense has been turned on.',
                'I have enabled house party protocol.'
                ] | random }}
            {%- endmacro -%}

              {%- macro house_party_protocol_disabled() -%}
              {{ [
                'The House Party has been canceled.',
                'Incense has been turned off.',
                'I have disabled house party protocol.'
                ] | random }}
            {%- endmacro -%}

            {%- macro snark_door_motion() -%}
              {{ [
                'Do you want me to send them away?',
                'I have armed the lasers. Just say the word.',
                'I was not informed there would be guests.',
                'They do not appear to have any gifts, so I suggest we do not open the door.',
                'My sensors have detected a meat popsicle.',
                'I do not think they can hear me.'
                ] | random }}
            {%- endmacro -%}

            {%- macro snark_door_open() -%}
              {{ [
                'Would you like me to calulate how much air condition is being wasted? Spoiler Alert. You are not going to like the answer.',
                'I have detected a large number of insects entering the house.',
                'Can a human be so kind and close it?',
                'The air quality in this house has actually improved.',
                'Closing the door would improve the security of the house.',
                'Hey. The door was just opened and this is crazy. But now you know. So. Close it maybe.'
                ] | random }}
            {%- endmacro -%}

            {# a macro that removes all newline characters, empty spaces, and returns formatted text. Also replaces all Underscores with Spaces  #}
            {%- macro cleanup(data) -%}
              {%- for item in data.split("\n")  if item | trim != "" -%}
                {{ item | trim | replace("_", " ") }} {% endfor -%}
            {%- endmacro -%}

            {# ********************************************* #}
            {#  ******** Start the Speech routines ********  #}
            {# ********************************************* #}
            {# a macro to call all macros :)  #}
            {%- macro mother_of_all_macros() -%}
              {% if call_greeting == 1 %}
                {{ greeting() }}
              {% endif %}

              {% if call_confirmation == 1 %}
                {{ confirmation() }}
              {% endif %}

              {% if call_interuption == 1 %}
                {{ interuption() }}
              {% endif %}

              {% if call_issue == 1 %}
                {{ issue() }}
              {% endif %}

              {% if call_time_is == 1 %}
                {{ time_is() }}
              {% endif %}

              {% if call_lightning_alert == 1 %}
                {{ lightning_alert() }}
              {% endif %}

              {% if call_lightning_clear == 1 %}
                {{ lightning_clear() }}
              {% endif %}

              {% if call_freeze_warning == 1 %}
                {{ freeze_warning() }}
              {% endif %}

              {% if call_rodney_location == 1 %}
                {{ rodney_location() }}
              {% endif %}

              {% if call_gina_location == 1 %}
                {{ gina_location() }}
              {% endif %}

              {% if call_headed_home_rodney == 1 %}
                {{ headed_home_rodney() }}
              {% endif %}
              
              {% if call_headed_home_gina == 1 %}
                {{ headed_home_gina() }}
              {% endif %}

              {% if call_traffic_conditions == 1 %}
                {{ traffic_conditions() }}
              {% endif %}

              {{ usps }}

              {% if call_iss == 1 %}
                {{ iss() }}
              {% endif %}

              {% if call_washer_needs_emptying == 1 %}
                {{ washer_needs_emptying() }}
              {% endif %}

              {% if call_house_party_protocol_enabled == 1 %}
                {{ house_party_protocol_enabled() }}
              {% endif %}

              {% if call_house_party_protocol_disabled == 1 %}
                {{ house_party_protocol_disabled() }}
              {% endif %}

              {{ welcome_home }}  

              {{ speech_message }}

              {% if call_snark_door_motion == 1 %}
                {{ snark_door_motion() }}
              {% endif %}

              {% if call_snark_door_open == 1 %}
                {{ snark_door_open() }}
              {% endif %}

              {% if call_school_pickup_reminder == 1 %}
                {{ school_pickup_reminder() }}
              {% endif %}

            {%- endmacro -%}

            {{- cleanup(mother_of_all_macros()) -}}

# ###############################################################################
# # Traffic Report
# ###############################################################################
#   traffic_report:
#     sequence:
#       - service: script.speech_engine
#         data:
#           call_traffic_conditions: 1

# ###############################################################################
# # Security Report
# ###############################################################################
#   security_report:
#     sequence:
#       - service: script.speech_engine
#         data:
#           call_security_report: 1

# ###############################################################################
# # Rodney Traffic Reports
# ###############################################################################
#   rodney_eta_report:
#     sequence:
#       - service: script.speech_engine
#         data:
#           call_rodney_location: 1

#   rodney_headed_home_annc:
#     sequence:
#       - service: script.speech_engine
#         data:
#           call_headed_home_rodney: 1

# ###############################################################################
# # Gina Traffic Reports
# ###############################################################################
#   gina_eta_report:
#     sequence:
#       - service: script.speech_engine
#         data:
#           call_gina_location: 1

#   gina_headed_home_annc:
#     sequence:
#       - service: script.speech_engine
#         data:
#           call_headed_home_gina: 1